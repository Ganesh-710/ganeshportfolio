{"ast":null,"code":"var _jsxFileName = \"/home/gans-machine/developerFolio/src/containers/skillProgress/skillProgress.js\";\nimport React from \"react\";\nimport \"./Progress.scss\";\nimport { illustration, techStack } from \"../../portfolio\";\nimport { Fade } from \"react-reveal\";\nimport Build from \"../../assets/lottie/build\";\nimport DisplayLottie from \"../../components/displayLottie/DisplayLottie\";\nexport default function StackProgress() {\n  if (techStack.viewSkillBars) {\n    return /*#__PURE__*/React.createElement(Fade, {\n      bottom: true,\n      duration: 1000,\n      distance: \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion\",\n      id: \"accordionExample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      class: \"accordion-header\",\n      id: \"headingOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"accordion-button\",\n      type: \"button\",\n      \"data-bs-toggle\": \"collapse\",\n      \"data-bs-target\": \"#collapseOne\",\n      \"aria-expanded\": \"true\",\n      \"aria-controls\": \"collapseOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, \"Accordion Item #1\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"collapseOne\",\n      class: \"accordion-collapse collapse show\",\n      \"aria-labelledby\": \"headingOne\",\n      \"data-bs-parent\": \"#accordionExample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \"This is the first item's accordion body.\"), \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 428\n      }\n    }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      class: \"accordion-header\",\n      id: \"headingTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"accordion-button collapsed\",\n      type: \"button\",\n      \"data-bs-toggle\": \"collapse\",\n      \"data-bs-target\": \"#collapseTwo\",\n      \"aria-expanded\": \"false\",\n      \"aria-controls\": \"collapseTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, \"Accordion Item #2\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"collapseTwo\",\n      class: \"accordion-collapse collapse\",\n      \"aria-labelledby\": \"headingTwo\",\n      \"data-bs-parent\": \"#accordionExample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 430\n      }\n    }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      class: \"accordion-header\",\n      id: \"headingThree\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"accordion-button collapsed\",\n      type: \"button\",\n      \"data-bs-toggle\": \"collapse\",\n      \"data-bs-target\": \"#collapseThree\",\n      \"aria-expanded\": \"false\",\n      \"aria-controls\": \"collapseThree\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, \"Accordion Item #3\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"collapseThree\",\n      class: \"accordion-collapse collapse\",\n      \"aria-labelledby\": \"headingThree\",\n      \"data-bs-parent\": \"#accordionExample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"This is the third item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 429\n      }\n    }, \".accordion-body\"), \", though the transition does limit overflow.\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"skills-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"skills-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"skills-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \"Proficiency\"), techStack.experience.map((exp, i) => {\n      const progressStyle = {\n        width: exp.progressPercentage\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: i,\n        className: \"skill\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 19\n        }\n      }, exp.Stack), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"meter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: progressStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      })));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"skills-image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, illustration.animated ? /*#__PURE__*/React.createElement(DisplayLottie, {\n      animationData: Build,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"Skills\",\n      src: require(\"../../assets/images/skill.svg\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/gans-machine/developerFolio/src/containers/skillProgress/skillProgress.js"],"names":["React","illustration","techStack","Fade","Build","DisplayLottie","StackProgress","viewSkillBars","experience","map","exp","i","progressStyle","width","progressPercentage","Stack","animated","require"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./Progress.scss\";\nimport {illustration, techStack} from \"../../portfolio\";\nimport {Fade} from \"react-reveal\";\nimport Build from \"../../assets/lottie/build\";\nimport DisplayLottie from \"../../components/displayLottie/DisplayLottie\";\n\nexport default function StackProgress() {\n  if (techStack.viewSkillBars) {\n    return (\n      <Fade bottom duration={1000} distance=\"20px\">\n       \n       <div class=\"accordion\" id=\"accordionExample\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingOne\">\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n        Accordion Item #1\n      </button>\n    </h2>\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingTwo\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n        Accordion Item #2\n      </button>\n    </h2>\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingThree\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n        Accordion Item #3\n      </button>\n    </h2>\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n</div>\n  \n        <div className=\"skills-container\">\n          <div className=\"skills-bar\">\n            <h1 className=\"skills-heading\">Proficiency</h1>\n            {techStack.experience.map((exp, i) => {\n              const progressStyle = {\n                width: exp.progressPercentage\n              };\n              return (\n                <div key={i} className=\"skill\">\n                  <p>{exp.Stack}</p>\n                  <div className=\"meter\">\n                    <span style={progressStyle}></span>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"skills-image\">\n            {illustration.animated ? (\n              <DisplayLottie animationData={Build} />\n            ) : (\n              <img\n                alt=\"Skills\"\n                src={require(\"../../assets/images/skill.svg\")}\n              />\n            )}\n          </div>\n        </div>\n      </Fade>\n    );\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}